#version: "3.8"

x-base_service: &base_service
  environment:
    - IP_ADDRESS=192.168.55.1
    - PORT=11311
    - DISPLAY=${DISPLAY}
    - ROS_MASTER_URI=http://192.168.55.1:11311
    #    - ROS_MASTER_URI=http://10.0.0.99:11311
    - ROS_IP=192.168.55.1
  #    - ROS_IP=10.0.0.99
  volumes:
    - .:/run/detect
    - /tmp/.X11-unix:/tmp/.X11-unix
    - /dev/video0:/dev/video0
    - /dev:/dev
  network_mode: host

x-with-gpu: &with_gpu
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [ gpu ]

services:
  bash:
    <<: *base_service
    image: arm64v8/ros:noetic-ros-core
    command: [ "bash", "-i" ]
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    profiles: [ "bash" ]

  roscore:
    <<: *base_service
    image: arm64v8/ros:noetic-ros-core
    platform: linux/arm64
    profiles: [ "core" ]
    command: [ "roscore", "-v" ]
    healthcheck:
      test: curl -f --silent localhost:11311; [ "$?" == 7 ]; echo $?
      interval: 6s
      timeout: 5s
      retries: 5

  bridge:
    <<: *base_service
    build:
      context: .
      dockerfile: testing/bridge.Dockerfile
    profiles: [ "bridge" ]
    command: [ "rosrun", "foxglove_bridge", "foxglove_bridge" ]

  img_detect: &img_detect
    <<: *base_service
    runtime: nvidia
    platform: linux/arm64
    build:
      context: .
      dockerfile: detect/Dockerfile
    profiles: [ "cpu" ]
    command: [
      "python3", "/run/detect/detect/detect_image.py",
      "-m", "/run/detect/model.pt",
      "-c", "0.6",
      "-i", "camera/raw"
    ]

  detect_v2:
    <<: *base_service
    runtime: nvidia
    platform: linux/arm64
    image: detectv2:latest
    build:
      context: ./detect_v2
      dockerfile: Dockerfile
    profiles: [ "v2" ]
    command: [ "rosrun", "detect", "detect_node", "0.6", "camera/color/image_raw" ]
    depends_on:
      roscore:
        condition: service_healthy

  img_detect_gpu:
    <<: [ *img_detect, *with_gpu ]
    profiles: [ "gpu" ]

  img_pub:
    <<: *base_service
    build:
      context: .
      dockerfile: ./camera/Dockerfile
    profiles: [ "webcam" ]
    privileged: true
    command: [ "python3", "/run/detect/camera/img_pub.py", "-f", "0" ]
    depends_on:
      roscore:
        condition: service_healthy

  realsense:
    <<: *base_service
    build:
      context: .
      dockerfile: ./realsense/Dockerfile
    profiles: [ "realsense" ]
    privileged: true
    command: [
      "roslaunch", "realsense2_camera", "rs_camera.launch",
      "color_width:=640",
      "color_height:=480",
      "color_fp:=30",
      "enable_infra1:=false",
      "enable_infra2:=false",
      "enable_depth:=false",
      "initial_reset:=true",
      #"depth_module.depth_profile:=1280x720x30",
    ]
    depends_on:
      roscore:
        condition: service_healthy

